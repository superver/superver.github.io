{"pages":[{"title":"","date":"2020-05-05T04:29:22.309Z","path":"/404.html","text":"Error 404 Not Found - 您访问的页面不存在~"},{"title":"Categories","date":"2020-05-05T04:10:58.936Z","path":"categories/index.html","text":""},{"title":"About","date":"2020-05-05T07:25:17.194Z","path":"about/index.html","text":"关于我自己 2018年新加坡 关于编程 专注业务,针对实际场景 兴趣爱好旅行、篮球、音乐、 一句话 努力才有回报 重大事件 2019年春节 我结婚了"},{"title":"Tags","date":"2020-05-05T04:10:59.084Z","path":"tags/index.html","text":""}],"posts":[{"title":"life is long long journey","date":"2020-05-05T06:46:10.069Z","path":"wiki/life/生活_感悟/","text":"生活是一段长长的旅行 生活是一段奇妙的旅行，每一处风景都是回忆 即使你不在我身边，我也要用我的眼睛，帮你问候泸沽湖的旖旎风光。 旅行不在乎终点，而是在意途中的人和事，还有那些完美的记忆和景色。 青春随着年纪的长大一切都渐行渐远，充斥着柴米油盐","tags":[{"name":"life","slug":"life","permalink":"https://superver.github.io/tags/life/"}],"categories":[{"name":"life","slug":"life","permalink":"https://superver.github.io/categories/life/"}]},{"title":"nginx模块配置","date":"2020-05-05T06:02:56.652Z","path":"wiki/blog/nginx/nginx_php-fpm_配置/","text":"server配置123loction.\\&#123; fast_cgi_param : inclue fast-params;&#125;","tags":[{"name":"nginx","slug":"nginx","permalink":"https://superver.github.io/tags/nginx/"},{"name":"linux","slug":"linux","permalink":"https://superver.github.io/tags/linux/"}],"categories":[{"name":"blog","slug":"blog","permalink":"https://superver.github.io/categories/blog/"},{"name":"nginx","slug":"blog/nginx","permalink":"https://superver.github.io/categories/blog/nginx/"}]},{"title":"php_常用函数","date":"2020-05-05T05:57:22.091Z","path":"wiki/blog/php/php_常用函数/","text":"扩展函数常1array_coloumn($arr,$index,$key); php常用算法-冒泡 12345678910111213141516171819function BubbleSort($arr)&#123; if(empty($arr) || count($arr)&lt;=1 ) return $arr; $count = count($arr); $jmax = $count -1; for($i=0;$i&lt;$count,$i++)&#123; for($j=$i;$j&lt;$jmax;$j++)&#123; if($arr[$j]&gt;$arr[$i])&#123; //交换位置 $tmp = $arr[$j]; $arr[$j] = $arr[$i]; $arr[$i] = $tmp; &#125; &#125; &#125; return $arr; &#125; php常用算法-快速 123456789101112131415161718192021function quickSort($arr)&#123; if(empty($arr) || count($arr)&lt;=1 ) return $arr; $mid =$arr[0]; $len =count($arr); $right = $left = []; for($i=0;$i&lt;$arr;$i++)&#123; if($arr[$i]&gt;$mid)&#123; $right[] = $arr[$i]; &#125;else&#123; $left[] = $arr[$i]; &#125; &#125; $right = quickSort($right); $left = quickSort($left); return array_merge($right,array($mid),$right); &#125;","tags":[{"name":"php","slug":"php","permalink":"https://superver.github.io/tags/php/"}],"categories":[{"name":"blog","slug":"blog","permalink":"https://superver.github.io/categories/blog/"},{"name":"php","slug":"blog/php","permalink":"https://superver.github.io/categories/blog/php/"}]},{"title":"【建强】wiki 集合","date":"2020-05-05T04:10:59.939Z","path":"wiki/index/","text":"@blogphp版聚合支付 @blogYii框架干货集合 @blogphp知识点集合 🐘 A little Tips in my Code Career with PHP 🐘","tags":[],"categories":[]},{"title":"php_引用计数与gc","date":"2020-01-10T13:28:59.000Z","path":"wiki/blog/php/php_引用计数与GC/","text":"进行php扩展开发的时候会遇到一些问题，就是php用户态空间将变量传递到扩展层面c层调用的时候，会出现一些问题，下面的例子是一个timer定时器的例子。用户空间会传递一个回调函数给timer扩展接口，那么实际回调函数被调用的地方是c层。但是该回调函数变量本身是由用户空间申请并交由php内核gc管理的，如果扩展函数内不做任何操作，那么当切换到用户空间时php内核会判断该变量需要回收，然后扩展函数就会空指针异常等 当扩展函数内该php变量生命周期使用结束后，任然需要考虑垃圾回收的问题，并不是在扩展函数内简单free(data)就可以的，需要调用php内核引用计数接口等进行变量的回收以及gc等，最后交由php内核gc管理。当然扩展函数内由c自行申请管理的内存可以自己释放 扩展函数定义示例12345678910111213PHP_METHOD(timer_obj,tick)&#123; php_lib_timer_callback *fci = (php_lib_timer_callback *)malloc(sizeof(php_lib_timer_callback)); //强制传入两个参数 ZEND_PARSE_PARAMETERS_START(2, 2) Z_PARAM_LONG(fci-&gt;seconds) Z_PARAM_FUNC(fci-&gt;fci,fci-&gt;fcc) ZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE); long id = create_time_event(fci-&gt;seconds,tick,fci,del); zend_fci_cache_persist(&amp;fci-&gt;fcc); RETURN_LONG(id);&#125; 扩展函数内执行php用户态回调函数示例12345678910int tick(long long id,void *data)&#123; php_lib_timer_callback *fci = (php_lib_timer_callback *)data; zval result; fci-&gt;fci.retval = &amp;result; if(zend_call_function(&amp;fci-&gt;fci,&amp;fci-&gt;fcc) != SUCCESS)&#123; return NOMORE; &#125; return fci-&gt;seconds;&#125; timer 中对回调函数变量进行引用计数+1上面会发现timer::tick()函数在返回给用户空间时会做一个操作zend_fci_cache_persist(&amp;fci-&gt;fcc);，正是该调用对传入的回调函数进行饮用计数管理，告诉php内核该回调函数在c层会继续使用不用回收。代码如下1234567891011static void zend_fci_cache_persist(zend_fcall_info_cache *fci_cache)&#123; if (fci_cache-&gt;object) &#123; GC_ADDREF(fci_cache-&gt;object); &#125; if (fci_cache-&gt;function_handler-&gt;op_array.fn_flags &amp; ZEND_ACC_CLOSURE) &#123; GC_ADDREF(ZEND_CLOSURE_OBJECT(fci_cache-&gt;function_handler)); &#125;&#125; 其中GC_ADDREF（）函数很明显就是内核GC相关的api。fci_cache-&gt;function_handler 则为用户传递的回调函数真正的变量地址 如上前奏后就可以在c扩展中放心的对用户传递的变量进行操作了 timer 中结束后变量的Gc回收上面有看到php_lib_timer_callback变量实际是自己定义的结构体，包括内存也是有开发者自己分配的，可以放心的free。但是该结构体中指向的fci.fcc 则实际是php用户空间申请的变量，不能直接free,如果直接free，会引发php gc泄漏，如下警告所示: 123&gt; php timer.php/php/src/Zend/zend_closures.c(459) : Freeing 0x00007fc084e6d480 (304 bytes), script=/timer.php=== Total 1 memory leaks detected === 所以依然需要根据php内核GC的管理方式来处理用户空间的变量，也就是模拟用户空间那样对变量的管理： 12345678910111213141516171819202122static void zend_fci_cache_discard(zend_fcall_info_cache *fci_cache)&#123; if (fci_cache-&gt;object) &#123; OBJ_RELEASE(fci_cache-&gt;object); &#125; if (fci_cache-&gt;function_handler-&gt;op_array.fn_flags &amp; ZEND_ACC_CLOSURE) &#123; OBJ_RELEASE(ZEND_CLOSURE_OBJECT(fci_cache-&gt;function_handler)); &#125;&#125;static void zend_fci_params_discard(zend_fcall_info *fci)&#123; if (fci-&gt;param_count &gt; 0) &#123; uint32_t i; for (i = 0; i &lt; fci-&gt;param_count; i++) &#123; zval_ptr_dtor(&amp;fci-&gt;params[i]); &#125; efree(fci-&gt;params); &#125;&#125; 在不需要使用的时候，也需要对回调函数本身进行减引用，以及回调函数内的用户态的参数进行减引用以及变量的回收。只有做完上面这些基本的管理才能开发一个安全的扩展函数 总结总之用户空间申请的变量传递给扩展内函数使用，如果在返回给用户空间后依然会继续使用就要zval_copy或者引用计数+1,因为在返回给用户空间的时候本身用户空间gc会判断该变量是否有继续引用，否则就refcount -= 1，用户空间回收该变量，但是扩展函数内依然在访问该已经被销毁的变量。就会导致错误 只有将这些变量的引用与回收做好了才能开发出安全可靠的扩展函数","tags":[{"name":"linux","slug":"linux","permalink":"https://superver.github.io/tags/linux/"},{"name":"php","slug":"php","permalink":"https://superver.github.io/tags/php/"},{"name":"c","slug":"c","permalink":"https://superver.github.io/tags/c/"},{"name":"ext","slug":"ext","permalink":"https://superver.github.io/tags/ext/"},{"name":"refrerence","slug":"refrerence","permalink":"https://superver.github.io/tags/refrerence/"},{"name":"gc","slug":"gc","permalink":"https://superver.github.io/tags/gc/"}],"categories":[{"name":"blog","slug":"blog","permalink":"https://superver.github.io/categories/blog/"},{"name":"php","slug":"blog/php","permalink":"https://superver.github.io/categories/blog/php/"}]}],"categories":[{"name":"life","slug":"life","permalink":"https://superver.github.io/categories/life/"},{"name":"blog","slug":"blog","permalink":"https://superver.github.io/categories/blog/"},{"name":"nginx","slug":"blog/nginx","permalink":"https://superver.github.io/categories/blog/nginx/"},{"name":"php","slug":"blog/php","permalink":"https://superver.github.io/categories/blog/php/"}],"tags":[{"name":"life","slug":"life","permalink":"https://superver.github.io/tags/life/"},{"name":"nginx","slug":"nginx","permalink":"https://superver.github.io/tags/nginx/"},{"name":"linux","slug":"linux","permalink":"https://superver.github.io/tags/linux/"},{"name":"php","slug":"php","permalink":"https://superver.github.io/tags/php/"},{"name":"c","slug":"c","permalink":"https://superver.github.io/tags/c/"},{"name":"ext","slug":"ext","permalink":"https://superver.github.io/tags/ext/"},{"name":"refrerence","slug":"refrerence","permalink":"https://superver.github.io/tags/refrerence/"},{"name":"gc","slug":"gc","permalink":"https://superver.github.io/tags/gc/"}]}