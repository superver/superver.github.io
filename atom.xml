<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔚泪卿&#39;s Wiki</title>
  
  <subtitle>广漂老男孩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://superver.github.io/"/>
  <updated>2020-05-06T03:42:56.129Z</updated>
  <id>https://superver.github.io/</id>
  
  <author>
    <name>Gemini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用工具汇总</title>
    <link href="https://superver.github.io/wiki/tool/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/"/>
    <id>https://superver.github.io/wiki/tool/%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</id>
    <published>2020-05-06T02:21:33.589Z</published>
    <updated>2020-05-06T03:42:56.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、免费且开源的流程图工具-Draw-io"><a href="#一、免费且开源的流程图工具-Draw-io" class="headerlink" title="一、免费且开源的流程图工具 Draw.io"></a>一、免费且开源的流程图工具 Draw.io</h3><h3 id="二、itest-爱测试-4-5-2-发布，BUG-跟踪管理-amp-敏捷测试管理软件"><a href="#二、itest-爱测试-4-5-2-发布，BUG-跟踪管理-amp-敏捷测试管理软件" class="headerlink" title="二、itest(爱测试) 4.5.2 发布，BUG 跟踪管理 &amp; 敏捷测试管理软件"></a>二、itest(爱测试) 4.5.2 发布，BUG 跟踪管理 &amp; 敏捷测试管理软件</h3><h3 id="三、实现HTML5网站中常见的拖拽上传文件"><a href="#三、实现HTML5网站中常见的拖拽上传文件" class="headerlink" title="三、实现HTML5网站中常见的拖拽上传文件"></a>三、实现HTML5网站中常见的拖拽上传文件</h3><blockquote><p><code>https://www.toutiao.com/i6745411404561383939/</code></p></blockquote><h3 id="四、mysql常用函数"><a href="#四、mysql常用函数" class="headerlink" title="四、mysql常用函数"></a>四、mysql常用函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">一、数学函数</span><br><span class="line"></span><br><span class="line">ABS(x) 返回x的绝对值</span><br><span class="line">BIN(x) 返回x的二进制（OCT返回八进制，HEX返回十六进制）</span><br><span class="line">CEILING(x) 返回大于x的最小整数值</span><br><span class="line">EXP(x) 返回值e（自然对数的底）的x次方</span><br><span class="line">FLOOR(x) 返回小于x的最大整数值</span><br><span class="line">GREATEST(x1,x2,...,xn) 返回集合中最大的值</span><br><span class="line">LEAST(x1,x2,...,xn) 返回集合中最小的值</span><br><span class="line">LN(x) 返回x的自然对数</span><br><span class="line">LOG(x,y) 返回x的以y为底的对数</span><br><span class="line">MOD(x,y) 返回x/y的模（余数）</span><br><span class="line">PI() 返回pi的值（圆周率）</span><br><span class="line">RAND() 返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line">ROUND(x,y) 返回参数x的四舍五入的有y位小数的值</span><br><span class="line">SIGN(x) 返回代表数字x的符号的值</span><br><span class="line">SQRT(x) 返回一个数的平方根</span><br><span class="line">TRUNCATE(x,y) 返回数字x截短为y位小数的结果</span><br><span class="line">二、聚合函数(常用于GROUP BY从句的SELECT查询中)</span><br><span class="line"></span><br><span class="line">AVG(col)返回指定列的平均值</span><br><span class="line">COUNT(col)返回指定列中非<span class="keyword">NULL</span>值的个数</span><br><span class="line">MIN(col)返回指定列的最小值</span><br><span class="line">MAX(col)返回指定列的最大值</span><br><span class="line">SUM(col)返回指定列的所有值之和</span><br><span class="line">GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果</span><br><span class="line">三、字符串函数</span><br><span class="line"></span><br><span class="line">ASCII(char)返回字符的ASCII码值</span><br><span class="line">BIT_LENGTH(str)返回字符串的比特长度</span><br><span class="line">CONCAT(s1,s2...,sn)将s1,s2...,sn连接成字符串</span><br><span class="line">CONCAT_WS(sep,s1,s2...,sn)将s1,s2...,sn连接成字符串，并用sep字符间隔</span><br><span class="line">INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果</span><br><span class="line">FIND_IN_SET(str,<span class="keyword">list</span>)分析逗号分隔的<span class="keyword">list</span>列表，如果发现str，返回str在<span class="keyword">list</span>中的位置</span><br><span class="line">LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果</span><br><span class="line">LEFT(str,x)返回字符串str中最左边的x个字符</span><br><span class="line">LENGTH(s)返回字符串str中的字符数</span><br><span class="line">LTRIM(str) 从字符串str中切掉开头的空格</span><br><span class="line">POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置</span><br><span class="line">QUOTE(str) 用反斜杠转义str中的单引号</span><br><span class="line">REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果</span><br><span class="line">REVERSE(str) 返回颠倒字符串str的结果</span><br><span class="line">RIGHT(str,x) 返回字符串str中最右边的x个字符</span><br><span class="line">RTRIM(str) 返回字符串str尾部的空格</span><br><span class="line">STRCMP(s1,s2)比较字符串s1和s2</span><br><span class="line">TRIM(str)去除字符串首部和尾部的所有空格</span><br><span class="line">UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果</span><br><span class="line">四、日期和时间函数</span><br><span class="line"></span><br><span class="line">CURDATE()或CURRENT_DATE() 返回当前的日期</span><br><span class="line">CURTIME()或CURRENT_TIME() 返回当前的时间</span><br><span class="line">DATE_ADD(date,INTERVAL int keyword)返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_ADD(CURRENT_DATE,INTERVAL <span class="number">6</span> MONTH);</span><br><span class="line">DATE_FORMAT(date,fmt) 依照指定的fmt格式格式化日期date值</span><br><span class="line">DATE_SUB(date,INTERVAL int keyword)返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_SUB(CURRENT_DATE,INTERVAL <span class="number">6</span> MONTH);</span><br><span class="line">DAYOFWEEK(date) 返回date所代表的一星期中的第几天(<span class="number">1</span>~<span class="number">7</span>)</span><br><span class="line">DAYOFMONTH(date) 返回date是一个月的第几天(<span class="number">1</span>~<span class="number">31</span>)</span><br><span class="line">DAYOFYEAR(date) 返回date是一年的第几天(<span class="number">1</span>~<span class="number">366</span>)</span><br><span class="line">DAYNAME(date) 返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE);</span><br><span class="line">FROM_UNIXTIME(ts,fmt) 根据指定的fmt格式，格式化UNIX时间戳ts</span><br><span class="line">HOUR(time) 返回time的小时值(<span class="number">0</span>~<span class="number">23</span>)</span><br><span class="line">MINUTE(time) 返回time的分钟值(<span class="number">0</span>~<span class="number">59</span>)</span><br><span class="line">MONTH(date) 返回date的月份值(<span class="number">1</span>~<span class="number">12</span>)</span><br><span class="line">MONTHNAME(date) 返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE);</span><br><span class="line">NOW() 返回当前的日期和时间</span><br><span class="line">QUARTER(date) 返回date在一年中的季度(<span class="number">1</span>~<span class="number">4</span>)，如SELECT QUARTER(CURRENT_DATE);</span><br><span class="line">WEEK(date) 返回日期date为一年中第几周(<span class="number">0</span>~<span class="number">53</span>)</span><br><span class="line">YEAR(date) 返回日期date的年份(<span class="number">1000</span>~<span class="number">9999</span>)</span><br><span class="line">五、加密函数</span><br><span class="line"></span><br><span class="line">AES_ENCRYPT(str,key) 返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储</span><br><span class="line">AES_DECRYPT(str,key) 返回用密钥key对字符串str利用高级加密标准算法解密后的结果</span><br><span class="line">DECODE(str,key) 使用key作为密钥解密加密字符串str</span><br><span class="line">ENCRYPT(str,salt) 使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str</span><br><span class="line">ENCODE(str,key) 使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储</span><br><span class="line">MD5() 计算字符串str的MD5校验和</span><br><span class="line">PASSWORD(str) 返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。</span><br><span class="line">SHA() 计算字符串str的安全散列算法(SHA)校验和</span><br><span class="line">六、控制流函数</span><br><span class="line"></span><br><span class="line">MySQL有<span class="number">4</span>个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。MySQL控制流函数：</span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> WHEN[test1] THEN [result1]...<span class="keyword">ELSE</span> [<span class="keyword">default</span>] END如果testN是真，则返回resultN，否则返回<span class="keyword">default</span></span><br><span class="line"><span class="keyword">CASE</span> [test] WHEN[val1] THEN [result]...<span class="keyword">ELSE</span> [<span class="keyword">default</span>]END 如果test和valN相等，则返回resultN，否则返回<span class="keyword">default</span></span><br><span class="line"><span class="keyword">IF</span>(test,t,f) 如果test是真，返回t；否则返回f</span><br><span class="line">IFNULL(arg1,arg2) 如果arg1不是空，返回arg1，否则返回arg2</span><br><span class="line">NULLIF(arg1,arg2) 如果arg1=arg2返回<span class="keyword">NULL</span>；否则返回arg1</span><br><span class="line">七、格式化函数</span><br><span class="line"></span><br><span class="line">DATE_FORMAT(date,fmt) 依照字符串fmt格式化日期date值</span><br><span class="line">FORMAT(x,y) 把x格式化为以逗号隔开的数字序列，y是结果的小数位数</span><br><span class="line">INET_ATON(ip) 返回IP地址的数字表示</span><br><span class="line">INET_NTOA(num) 返回数字所代表的IP地址</span><br><span class="line">TIME_FORMAT(time,fmt) 依照字符串fmt格式化时间time值</span><br><span class="line">八、类型转化函数</span><br><span class="line"></span><br><span class="line">为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED</span><br><span class="line"></span><br><span class="line">九、系统信息函数</span><br><span class="line"></span><br><span class="line">DATABASE() 返回当前数据库名</span><br><span class="line">BENCHMARK(count,expr) 将表达式expr重复运行count次</span><br><span class="line">CONNECTION_ID() 返回当前客户的连接ID</span><br><span class="line">FOUND_ROWS() 返回最后一个SELECT查询进行检索的总行数</span><br><span class="line">USER()或SYSTEM_USER() 返回当前登陆用户名</span><br><span class="line">VERSION() 返回MySQL服务器的版本</span><br></pre></td></tr></table></figure><h3 id="五、ps插件：Background-Image-Plus"><a href="#五、ps插件：Background-Image-Plus" class="headerlink" title="五、ps插件：Background Image Plus +"></a>五、ps插件：Background Image Plus +</h3><h3 id="六、docker-图形化工具portainer-，shipyard"><a href="#六、docker-图形化工具portainer-，shipyard" class="headerlink" title="六、docker 图形化工具portainer ，shipyard"></a>六、docker 图形化工具portainer ，shipyard</h3><h3 id="七、多机定时任务可视化管理系统Gocron分享"><a href="#七、多机定时任务可视化管理系统Gocron分享" class="headerlink" title="七、多机定时任务可视化管理系统Gocron分享"></a>七、多机定时任务可视化管理系统Gocron分享</h3><blockquote><p><code>项目GitHub地址: https://github.com/ouqiang/gocron</code></p></blockquote><h3 id="八、分享几个浏览器的API接口-很实用"><a href="#八、分享几个浏览器的API接口-很实用" class="headerlink" title="八、分享几个浏览器的API接口(很实用)"></a>八、分享几个浏览器的API接口(很实用)</h3><blockquote><p><code>https://www.toutiao.com/i6682529032929542669/</code></p></blockquote><h3 id="九、MProxy是一个基于mysql协议，使用swoole-开发的mysql数据库连接池"><a href="#九、MProxy是一个基于mysql协议，使用swoole-开发的mysql数据库连接池" class="headerlink" title="九、MProxy是一个基于mysql协议，使用swoole 开发的mysql数据库连接池"></a>九、MProxy是一个基于mysql协议，使用swoole 开发的mysql数据库连接池</h3><blockquote><p><code>https://www.toutiao.com/i6755856450158854664/</code></p></blockquote><h3 id="十、WEB大并发之Nginx优化秘籍"><a href="#十、WEB大并发之Nginx优化秘籍" class="headerlink" title="十、WEB大并发之Nginx优化秘籍"></a>十、WEB大并发之Nginx优化秘籍</h3><blockquote><p><code>https://www.toutiao.com/i6747547801699222024/</code></p></blockquote><h3 id="十一、Redis-到底是怎么实现-gt-附近的人"><a href="#十一、Redis-到底是怎么实现-gt-附近的人" class="headerlink" title="十一、Redis 到底是怎么实现  -&gt;附近的人"></a>十一、Redis 到底是怎么实现  -&gt;附近的人</h3><blockquote><p><code>https://www.toutiao.com/i6747559205139382791/</code></p></blockquote><h3 id="十二、如何理解CGI-FastCGI-php-fpm"><a href="#十二、如何理解CGI-FastCGI-php-fpm" class="headerlink" title="十二、如何理解CGI,FastCGI,php-fpm"></a>十二、如何理解CGI,FastCGI,php-fpm</h3><blockquote><p><code>https://www.toutiao.com/i6744630391568597516/</code></p></blockquote><h3 id="十三、-PHP调试之ChromePHP"><a href="#十三、-PHP调试之ChromePHP" class="headerlink" title="十三、 PHP调试之ChromePHP"></a>十三、 PHP调试之ChromePHP</h3><h3 id="十四、-基础也很重要！PHP中令人困惑的strtotime，有时也会闹些小脾气"><a href="#十四、-基础也很重要！PHP中令人困惑的strtotime，有时也会闹些小脾气" class="headerlink" title="十四、 基础也很重要！PHP中令人困惑的strtotime，有时也会闹些小脾气"></a>十四、 基础也很重要！PHP中令人困惑的strtotime，有时也会闹些小脾气</h3><blockquote><p><code>https://www.toutiao.com/c/user/62018430890/#mid=1639681391650823</code></p></blockquote><h3 id="十五、-使用-PHP-实现-LRU-缓存淘汰算法"><a href="#十五、-使用-PHP-实现-LRU-缓存淘汰算法" class="headerlink" title="十五、 使用 PHP 实现 LRU 缓存淘汰算法"></a>十五、 使用 PHP 实现 LRU 缓存淘汰算法</h3><blockquote><p><code>https://www.toutiao.com/i6746606879931105805/</code></p></blockquote><h3 id="十六、-JWT与Session的比较"><a href="#十六、-JWT与Session的比较" class="headerlink" title="十六、 JWT与Session的比较"></a>十六、 JWT与Session的比较</h3><blockquote><p><code>https://www.toutiao.com/i6737442710434628103/</code></p></blockquote><h3 id="十七、-抽象类与接口的区别"><a href="#十七、-抽象类与接口的区别" class="headerlink" title="十七、 抽象类与接口的区别"></a>十七、 抽象类与接口的区别</h3><blockquote><p><code>https://www.toutiao.com/i6670462347686969860/</code></p></blockquote><h3 id="十八、-PHP并行请求接口"><a href="#十八、-PHP并行请求接口" class="headerlink" title="十八、 PHP并行请求接口"></a>十八、 PHP并行请求接口</h3><blockquote><p><code>https://www.toutiao.com/i6721889491918782983/</code></p></blockquote><h3 id="十九、-用真实案例来了解PHP底层技术原理及代码优化建议"><a href="#十九、-用真实案例来了解PHP底层技术原理及代码优化建议" class="headerlink" title="十九、 用真实案例来了解PHP底层技术原理及代码优化建议"></a>十九、 用真实案例来了解PHP底层技术原理及代码优化建议</h3><blockquote><p><code>https://www.toutiao.com/i6723170171646640644/</code></p></blockquote><h3 id="二十、通过nginx反向代理实现跨域访问"><a href="#二十、通过nginx反向代理实现跨域访问" class="headerlink" title="二十、通过nginx反向代理实现跨域访问"></a>二十、通过nginx反向代理实现跨域访问</h3><blockquote><p><code>https://www.toutiao.com/i6723179273017885196/</code></p></blockquote><h3 id="二十一、十八般武艺之Nginx踩坑总结"><a href="#二十一、十八般武艺之Nginx踩坑总结" class="headerlink" title="二十一、十八般武艺之Nginx踩坑总结"></a>二十一、十八般武艺之Nginx踩坑总结</h3><blockquote><p><code>https://www.toutiao.com/i6722699822328971783/</code></p></blockquote><h3 id="二十二、PHP多任务，并发并行，多线程，协程等知识点理解"><a href="#二十二、PHP多任务，并发并行，多线程，协程等知识点理解" class="headerlink" title="二十二、PHP多任务，并发并行，多线程，协程等知识点理解"></a>二十二、PHP多任务，并发并行，多线程，协程等知识点理解</h3><blockquote><p><code>https://www.toutiao.com/i6723083914933436942/</code></p></blockquote><h3 id="二十三、PHP-7-4类型属性实例详解"><a href="#二十三、PHP-7-4类型属性实例详解" class="headerlink" title="二十三、PHP 7.4类型属性实例详解"></a>二十三、PHP 7.4类型属性实例详解</h3><blockquote><p><code>https://www.toutiao.com/i6722262748182348296/</code></p></blockquote><h2 id="二十四、Redis-那你们知道三大衍生数据结构吗"><a href="#二十四、Redis-那你们知道三大衍生数据结构吗" class="headerlink" title="二十四、Redis,那你们知道三大衍生数据结构吗"></a>二十四、Redis,那你们知道三大衍生数据结构吗</h2><blockquote><p><code>https://www.toutiao.com/i6719076021229847043/</code></p></blockquote><h2 id="二十五、redis-和-memcached-有什么区别"><a href="#二十五、redis-和-memcached-有什么区别" class="headerlink" title="二十五、redis 和 memcached 有什么区别"></a>二十五、redis 和 memcached 有什么区别</h2><blockquote><p><code>https://www.toutiao.com/item/6719410555750187527/</code></p></blockquote><p>基于分布式锁的防止重复请求解决方案（值得收藏）</p><blockquote><p><code>https://www.toutiao.com/item/6718897355686412807/</code></p></blockquote><p>超详细的MySQL binlog总结，值得收藏</p><blockquote><p><code>https://www.toutiao.com/item/6716082287168979469/</code></p></blockquote><p>MySql快速插入百万条数据「巴分巴秒」</p><blockquote><p><code>https://www.toutiao.com/item/6713815180104434187/</code></p></blockquote><p>Github上 10 个开源免费且优秀的后台控制面板</p><blockquote><p><code>https://www.toutiao.com/item/6683377252178067981/</code></p></blockquote><p>JSON Web Token - 在Web应用间安全地传递信息</p><blockquote><p><code>https://www.toutiao.com/item/6679714227688571404/</code></p></blockquote><p>推荐九个堪称神器的命令行工具给程序员们</p><blockquote><p><code>https://www.toutiao.com/item/6688105611495735812/</code></p></blockquote><p>程序猿30个骚操作</p><blockquote><p><code>https://www.toutiao.com/item/6688319659667620359/</code></p></blockquote><p>mysql主键索引和普通索引之间的区别是什么 </p><blockquote><p><code>https://www.toutiao.com/item/6688808031032967688/</code></p></blockquote><p>这 10 款堪称神器的插件，让你的 Chrome 成为最好用的浏览器</p><blockquote><p><code>https://www.toutiao.com/item/6690440291205251588/</code></p></blockquote><p>Kafka、RabbitMQ、RocketMQ、ActiveMQ 到底该选用哪个？</p><blockquote><p><code>https://www.toutiao.com/item/6689710266097074700/</code></p></blockquote><p>开发神器，全能程序员就在这里</p><blockquote><p><code>https://www.toutiao.com/item/6691461187449651719/</code></p></blockquote><p>IntelliJ IDEA 18个常用插件，动图演示，让效率成为习惯</p><blockquote><p><code>https://www.toutiao.com/item/6694088151943610884/</code></p></blockquote><p>一文搞懂Nginx限流，原来这么简单</p><blockquote><p><code>https://www.toutiao.com/item/6694571806835081742/</code></p></blockquote><p>详解Redis 主从复制及主从复制原理</p><blockquote><p><code>https://www.toutiao.com/item/6693803701817049608/</code></p></blockquote><p>SQL高级知识——递归查询</p><blockquote><p><code>https://www.toutiao.com/item/6694050855185809933/</code></p></blockquote><p>15年前的压测工具依然是运维必备，600 行代码实现最高 30k 并发</p><blockquote><p><code>https://www.toutiao.com/item/6695638547438764558/</code></p></blockquote><p>19条MySQL优化经验</p><blockquote><p><code>https://www.toutiao.com/item/6670689051776909837/</code></p></blockquote><p>Sentinel哨兵机制实现Redis的高可用</p><blockquote><p><code>https://www.toutiao.com/item/6691809335594451460/</code></p></blockquote><p>你本可以少写些 if-else</p><blockquote><p><code>https://www.toutiao.com/item/6697113412352082440/</code></p></blockquote><p>使用canal增量同步mysql数据库信息到ElasticSearch</p><blockquote><p><code>https://www.toutiao.com/item/6706096293032231432/</code></p></blockquote><p>“分布式事务”，这次彻底懂了</p><blockquote><p><code>https://www.toutiao.com/item/6707131456386236940/</code></p></blockquote><p>基于Electron实现的PC桌面聊天软件</p><blockquote><p><code>https://www.toutiao.com/item/6709286488976130572/</code></p></blockquote><p>有了docsify神器，从此爱上看文档</p><blockquote><p><code>https://www.toutiao.com/item/6717631819438621191/</code></p></blockquote><p>70条常用Linux命令，助你完成小白到大神的转变</p><blockquote><p><code>https://www.toutiao.com/item/6717117096012022286/</code></p></blockquote><p>扫盲，为什么分布式一定要有Redis?</p><blockquote><p><code>https://www.toutiao.com/item/6717771071157699079/</code></p></blockquote><p>我想说：mysql的join真的很弱</p><blockquote><p><code>https://www.toutiao.com/item/6718552839372669448/</code></p></blockquote><p>你的项目中有Redis吗？Get完这篇你能掌握Redis60%（推荐收藏）</p><blockquote><p><code>https://www.toutiao.com/item/6717964909688128011/</code></p></blockquote><p>mysql开发理论：搞懂什么是长连接，短连接和连接池</p><blockquote><p><code>https://www.toutiao.com/item/6718702794125083150/</code></p></blockquote><p>100个Laravel开发人员下载量最高的扩展包</p><blockquote><p><code>https://www.toutiao.com/item/6721915619194700302/</code></p></blockquote><p>2019年360PHP工程师面试题</p><blockquote><p><code>https://www.toutiao.com/item/6722683385396855310/</code></p></blockquote><p>神奇的 SQL 之子查询，细节满满</p><blockquote><p><code>https://www.toutiao.com/item/6723071276455297548/</code></p></blockquote><p>PHP的微服务框架预览</p><blockquote><p><code>https://www.toutiao.com/item/6727168703365923339/</code></p></blockquote><p>简述PHP如何实现语音识别功能</p><blockquote><p><code>https://www.toutiao.com/item/6733463929592218125/</code></p></blockquote><p>php 的反射机制是什么？详解PHP反射API`</p><blockquote><p><code>https://www.toutiao.com/item/6727067503802974727/</code></p></blockquote><p>多平台统一，小程序跨平台开发统一解决方案——Antmove</p><blockquote><p><code>https://www.toutiao.com/item/6723159018186998275/</code></p></blockquote><p>针对php使用tars二进制协议的整体运维、RPC等一系列的解决方案</p><blockquote><p><code>https://www.toutiao.com/item/6722611925814870531/</code></p></blockquote><p>分享一款MySQL语句优化辅助工具–DBA必备</p><blockquote><p><code>https://www.toutiao.com/item/6743570924152291843/</code></p></blockquote><p>Workerman通信框架-协议Http类解析</p><blockquote><p><code>https://www.toutiao.com/item/6743570924152291843/</code></p></blockquote><p>数据同步工具otter（一）谈谈binlog和canal</p><blockquote><p><code>https://www.toutiao.com/item/6731594561778352647/</code></p></blockquote><p>进程(process)，作为操作系统结构的基础，多种状态下的情形分析</p><blockquote><p><code>https://www.toutiao.com/item/6744874472232190475/</code></p></blockquote><p>谈谈mongodb,mysql的区别和具体应用场景</p><blockquote><p><code>https://www.toutiao.com/item/6722071545943949831/</code></p></blockquote><p>我以为我对Kafka很了解，直到我看了此文章</p><blockquote><p><code>https://www.toutiao.com/item/6724572557472694796/</code></p></blockquote><p>MySQL表锁，以为自己懂了，结果一个答对的都没有</p><blockquote><p><code>https://www.toutiao.com/item/6742110043904147980/</code></p></blockquote><p>接口设计技巧和最佳实践</p><blockquote><p><code>https://www.toutiao.com/item/6732643141809078798/</code></p></blockquote><p>nginx配置静态资源与动态访问分离</p><blockquote><p><code>https://www.toutiao.com/item/6738259493387239949/</code></p></blockquote><p>理解 PHP 依赖注入 和 控制反转</p><blockquote><p><code>https://www.toutiao.com/item/6737855911936655885/</code></p></blockquote><p>Laravel实现定时发布任务</p><blockquote><p><code>https://www.toutiao.com/item/6737526429862330894/</code></p></blockquote><p>用 Authing 10分钟实现单点登录（SSO）</p><blockquote><p><code>https://www.toutiao.com/item/6726060529799922187/</code></p></blockquote><p>php设置错误级别</p><blockquote><p><code>https://www.toutiao.com/item/6746615399149732356/</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、免费且开源的流程图工具-Draw-io&quot;&gt;&lt;a href=&quot;#一、免费且开源的流程图工具-Draw-io&quot; class=&quot;headerlink&quot; title=&quot;一、免费且开源的流程图工具 Draw.io&quot;&gt;&lt;/a&gt;一、免费且开源的流程图工具 Draw.io&lt;/
      
    
    </summary>
    
    
      <category term="tool" scheme="https://superver.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://superver.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>redis常用面试问答</title>
    <link href="https://superver.github.io/wiki/resume/redis_%E4%B8%BA%E5%95%A5%E4%BC%9A%E5%BF%AB/"/>
    <id>https://superver.github.io/wiki/resume/redis_%E4%B8%BA%E5%95%A5%E4%BC%9A%E5%BF%AB/</id>
    <published>2020-05-05T23:01:08.040Z</published>
    <updated>2020-05-05T23:11:23.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Redis为什么是单线程"><a href="#一、Redis为什么是单线程" class="headerlink" title="一、Redis为什么是单线程"></a>一、Redis为什么是单线程</h2><p>单线程模型,没有多余的cpu上下文切换,而且也不用设计内部锁机制,<br>redis 单线程指的是网络请求模块使用了一个线程，即一个线程处理所有网络请求，其他模块仍用了多个线程,因为CPU不是Redis的瓶颈。Redis的瓶颈最有可能是机器内存或者网络带宽，既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了;</p><h2 id="二、Redis为什么这么快"><a href="#二、Redis为什么这么快" class="headerlink" title="二、Redis为什么这么快"></a>二、Redis为什么这么快</h2><p>1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)；</p><p>2、数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的；</p><p>3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>4、使用多路I/O复用模型，非阻塞IO；</p><p>5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p><h2 id="三、多路I-O复用模型，非阻塞IO"><a href="#三、多路I-O复用模型，非阻塞IO" class="headerlink" title="三、多路I/O复用模型，非阻塞IO"></a>三、多路I/O复用模型，非阻塞IO</h2><p>下面举一个例子，模拟一个tcp服务器处理30个客户socket。</p><p>假设你是一个监考老师，让30个学生解答一道竞赛考题，然后负责验收学生答卷，你有下面几个选择：</p><p>1.第一种选择：按顺序逐个验收，先验收A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。</p><p>这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。</p><p>2.第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。这种类似于为每一个用户创建一个进程或者线程处理连接。</p><p>3.第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。。。</p><p>这种就是IO复用模型，Linux下的select、poll和epoll就是干这个的。将用户socket对应的fd注册进epoll，然后epoll帮你监听哪些socket上有消息到达，这样就避免了大量的无用操作。此时的socket应该采用非阻塞模式。</p><p>这样，整个过程只在调用select、poll、epoll这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的reactor模式。</p><p>针对上面的举例在Redis中表现为</p><p>有30个redis客户端（考生）与redis服务器的网络连接模块（监考老师）保持TCP连接，客户端会不定时的发送请求给服务器，当有一个redis客户端发起请求，会触发unix系统像epoll这样的系统调用，Redis的I/O 多路复用模块封装了底层的epoll这样的 I/O 多路复用函数，然后转发到相应的事件处理器。</p><p>最后多路I/O复用模型图</p><p><img src="https://gitee.com/gemini123_admin/cdn/raw/master/20200506070831.png" alt="io复用模型"></p><p>文件事件处理器使用 I/O 多路复用模块同时监听多个 FD（文件描述符），当 accept、read、write 和 close 文件事件产生时，文件事件处理器就会回调 FD 绑定的事件处理器。</p><p>虽然整个文件事件处理器是在单线程上运行的，但是通过 I/O 多路复用模块的引入，实现了同时对多个 FD 读写的监控，提高了网络通信模型的性能，同时也可以保证整个 Redis 服务实现的简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Redis为什么是单线程&quot;&gt;&lt;a href=&quot;#一、Redis为什么是单线程&quot; class=&quot;headerlink&quot; title=&quot;一、Redis为什么是单线程&quot;&gt;&lt;/a&gt;一、Redis为什么是单线程&lt;/h2&gt;&lt;p&gt;单线程模型,没有多余的cpu上下文切换,而且
      
    
    </summary>
    
    
      <category term="resume" scheme="https://superver.github.io/categories/resume/"/>
    
    
      <category term="redis" scheme="https://superver.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>life is long long journey</title>
    <link href="https://superver.github.io/wiki/life/%E7%94%9F%E6%B4%BB_%E6%84%9F%E6%82%9F/"/>
    <id>https://superver.github.io/wiki/life/%E7%94%9F%E6%B4%BB_%E6%84%9F%E6%82%9F/</id>
    <published>2020-05-05T06:46:10.069Z</published>
    <updated>2020-05-05T07:25:45.633Z</updated>
    
    <content type="html"><![CDATA[<ul><li>生活是一段长长的旅行</li></ul><p>生活是一段奇妙的旅行，每一处风景都是回忆 </p><p><img src="/images/about/life-1.jpg" alt="images"></p><p>即使你不在我身边，我也要用我的眼睛，帮你问候泸沽湖的旖旎风光。</p><p>旅行不在乎终点，而是在意途中的人和事，还有那些完美的记忆和景色。</p><p>青春随着年纪的长大一切都渐行渐远，充斥着柴米油盐</p><p><img src="/images/about/life-2.jpg" alt="images"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;生活是一段长长的旅行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生活是一段奇妙的旅行，每一处风景都是回忆 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/about/life-1.jpg&quot; alt=&quot;images&quot;&gt;&lt;/p&gt;
&lt;p&gt;即使你不在我身边，我也要用我的眼睛，帮你
      
    
    </summary>
    
    
      <category term="life" scheme="https://superver.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://superver.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>nginx模块配置</title>
    <link href="https://superver.github.io/wiki/blog/nginx/nginx_php-fpm_%E9%85%8D%E7%BD%AE/"/>
    <id>https://superver.github.io/wiki/blog/nginx/nginx_php-fpm_%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-05T06:02:56.652Z</published>
    <updated>2020-05-05T06:45:03.395Z</updated>
    
    <content type="html"><![CDATA[<ul><li>server配置<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loction.\&#123;</span><br><span class="line">    fast_cgi_param : inclue fast-params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;server配置&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
    
      <category term="blog" scheme="https://superver.github.io/categories/blog/"/>
    
      <category term="nginx" scheme="https://superver.github.io/categories/blog/nginx/"/>
    
    
      <category term="nginx" scheme="https://superver.github.io/tags/nginx/"/>
    
      <category term="linux" scheme="https://superver.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>php_常用函数</title>
    <link href="https://superver.github.io/wiki/blog/php/php_%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://superver.github.io/wiki/blog/php/php_%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2020-05-05T05:57:22.091Z</published>
    <updated>2020-05-05T07:01:48.498Z</updated>
    
    <content type="html"><![CDATA[<ul><li>扩展函数常<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_coloumn($arr,$index,$key);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>php常用算法-冒泡</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">empty</span>($arr) || count($arr)&lt;=<span class="number">1</span> ) <span class="keyword">return</span> $arr;</span><br><span class="line">   </span><br><span class="line">   $count = count($arr);</span><br><span class="line">   $jmax     = $count <span class="number">-1</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$count,$i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>($j=$i;$j&lt;$jmax;$j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>($arr[$j]&gt;$arr[$i])&#123;</span><br><span class="line">              <span class="comment">//交换位置 </span></span><br><span class="line">              $tmp = $arr[$j];</span><br><span class="line">              $arr[$j] = $arr[$i];</span><br><span class="line">              $arr[$i] = $tmp; </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> $arr;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>php常用算法-快速</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">empty</span>($arr) || count($arr)&lt;=<span class="number">1</span> ) <span class="keyword">return</span> $arr;</span><br><span class="line">   </span><br><span class="line">   $mid =$arr[<span class="number">0</span>];</span><br><span class="line">   $len =count($arr);</span><br><span class="line">   </span><br><span class="line">   $right = $left = [];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$arr;$i++)&#123;</span><br><span class="line">       <span class="keyword">if</span>($arr[$i]&gt;$mid)&#123;</span><br><span class="line">          $right[] = $arr[$i];</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $left[] = $arr[$i];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   $right = quickSort($right);</span><br><span class="line">   $left  = quickSort($left);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> array_merge($right,<span class="keyword">array</span>($mid),$right);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;扩展函数常&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="blog" scheme="https://superver.github.io/categories/blog/"/>
    
      <category term="php" scheme="https://superver.github.io/categories/blog/php/"/>
    
    
      <category term="php" scheme="https://superver.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>【建强】wiki 集合</title>
    <link href="https://superver.github.io/wiki/index/"/>
    <id>https://superver.github.io/wiki/index/</id>
    <published>2020-05-05T04:10:59.939Z</published>
    <updated>2020-05-05T06:43:54.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="blog"><a href="#blog" class="headerlink" title="@blog"></a>@<a href="https://github.com/jianqiangsong/payment"><code>blog</code></a></h2><p>php版聚合支付</p><h2 id="blog-1"><a href="#blog-1" class="headerlink" title="@blog"></a>@<a href="https://github.com/jianqiangsong/yii-important"><code>blog</code></a></h2><p>Yii框架干货集合</p><h2 id="blog-2"><a href="#blog-2" class="headerlink" title="@blog"></a>@<a href="https://github.com/jianqiangsong/easy-tips"><code>blog</code></a></h2><p>php知识点集合 🐘</p><ul><li><a href="http://easy-tips.tigerb.cn"><code>A little Tips in my Code Career with PHP 🐘</code></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;blog&quot;&gt;&lt;a href=&quot;#blog&quot; class=&quot;headerlink&quot; title=&quot;@blog&quot;&gt;&lt;/a&gt;@&lt;a href=&quot;https://github.com/jianqiangsong/payment&quot;&gt;&lt;code&gt;blog&lt;/code&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>php_引用计数与gc</title>
    <link href="https://superver.github.io/wiki/blog/php/php_%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E4%B8%8EGC/"/>
    <id>https://superver.github.io/wiki/blog/php/php_%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E4%B8%8EGC/</id>
    <published>2020-01-10T13:28:59.000Z</published>
    <updated>2020-05-05T04:10:59.208Z</updated>
    
    <content type="html"><![CDATA[<p>进行php扩展开发的时候会遇到一些问题，就是php用户态空间将变量传递到扩展层面<code>c层调用</code>的时候，会出现一些问题，下面的例子是一个timer定时器的例子。<br>用户空间会传递一个回调函数给<code>timer扩展接口</code>，那么实际回调函数被调用的地方是<code>c层</code>。但是该回调函数变量本身是由用户空间<code>申请</code>并交由php<code>内核gc管理</code>的，<br>如果扩展函数内不做任何操作，那么当切换到用户空间时php内核会判断该变量<code>需要回收</code>，然后扩展函数就会空指针异常等</p><p>当扩展函数内该php变量生命周期使用结束后，任然需要考虑<code>垃圾回收</code>的问题，并不是在扩展函数内简单<code>free(data)</code>就可以的，需要调用php内核引用计数接口等<br>进行变量的回收以及gc等，最后交由php内核gc管理。当然扩展函数内由c自行申请管理的内存可以自己释放</p><ul><li>扩展函数定义示例<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PHP_METHOD(timer_obj,tick)</span><br><span class="line">&#123;</span><br><span class="line">    php_lib_timer_callback *fci = (php_lib_timer_callback *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(php_lib_timer_callback));</span><br><span class="line">    <span class="comment">//强制传入两个参数</span></span><br><span class="line">    ZEND_PARSE_PARAMETERS_START(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    Z_PARAM_LONG(fci-&gt;seconds)</span><br><span class="line">    Z_PARAM_FUNC(fci-&gt;fci,fci-&gt;fcc)</span><br><span class="line">    ZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> id = create_time_event(fci-&gt;seconds,tick,fci,del);</span><br><span class="line">    zend_fci_cache_persist(&amp;fci-&gt;fcc);</span><br><span class="line">    RETURN_LONG(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>扩展函数内执行php用户态回调函数示例<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tick</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> id,<span class="keyword">void</span> *data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    php_lib_timer_callback *fci = (php_lib_timer_callback *)data;</span><br><span class="line">    zval result;</span><br><span class="line">    fci-&gt;fci.retval = &amp;result;</span><br><span class="line">    <span class="keyword">if</span>(zend_call_function(&amp;fci-&gt;fci,&amp;fci-&gt;fcc) != SUCCESS)&#123;</span><br><span class="line">        <span class="keyword">return</span> NOMORE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fci-&gt;seconds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="timer-中对回调函数变量进行引用计数-1"><a href="#timer-中对回调函数变量进行引用计数-1" class="headerlink" title="timer 中对回调函数变量进行引用计数+1"></a>timer 中对回调函数变量进行引用计数+1</h2>上面会发现timer::tick()函数在返回给用户空间时会做一个操作<code>zend_fci_cache_persist(&amp;fci-&gt;fcc);</code>，正是该调用<br>对传入的回调函数进行饮用计数管理，<code>告诉php内核该回调函数在c层会继续使用不用回收</code>。代码如下<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zend_fci_cache_persist</span><span class="params">(zend_fcall_info_cache *fci_cache)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fci_cache-&gt;object)</span><br><span class="line">    &#123;</span><br><span class="line">        GC_ADDREF(fci_cache-&gt;object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fci_cache-&gt;function_handler-&gt;op_array.fn_flags &amp; ZEND_ACC_CLOSURE)</span><br><span class="line">    &#123;</span><br><span class="line">        GC_ADDREF(ZEND_CLOSURE_OBJECT(fci_cache-&gt;function_handler));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其中<code>GC_ADDREF（）</code>函数很明显就是内核GC相关的api。<code>fci_cache-&gt;function_handler</code> 则为用户传递的回调函数真正的变量地址</p><p>如上前奏后就可以在c扩展中放心的对用户传递的变量进行操作了</p><h2 id="timer-中结束后变量的Gc回收"><a href="#timer-中结束后变量的Gc回收" class="headerlink" title="timer 中结束后变量的Gc回收"></a>timer 中结束后变量的Gc回收</h2><p>上面有看到<code>php_lib_timer_callback</code>变量实际是自己定义的结构体，包括内存也是有开发者自己分配的，可以放心的<code>free</code>。但是该结构体中<br>指向的<code>fci.fcc</code> 则实际是php用户空间申请的变量，不能直接<code>free</code>,如果直接free，会引发php gc泄漏，如下警告所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; php timer.php</span><br><span class="line">/php/src/Zend/zend_closures.c(<span class="number">459</span>) :  Freeing <span class="number">0x00007fc084e6d480</span> (<span class="number">304</span> bytes), script=/timer.php</span><br><span class="line">=== Total <span class="number">1</span> memory leaks detected ===</span><br></pre></td></tr></table></figure><p>所以依然需要根据php内核GC的管理方式来处理用户空间的变量，也就是模拟用户空间那样对变量的管理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zend_fci_cache_discard</span><span class="params">(zend_fcall_info_cache *fci_cache)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fci_cache-&gt;object) &#123;</span><br><span class="line">        OBJ_RELEASE(fci_cache-&gt;object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fci_cache-&gt;function_handler-&gt;op_array.fn_flags &amp; ZEND_ACC_CLOSURE) &#123;</span><br><span class="line">        OBJ_RELEASE(ZEND_CLOSURE_OBJECT(fci_cache-&gt;function_handler));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zend_fci_params_discard</span><span class="params">(zend_fcall_info *fci)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fci-&gt;param_count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; fci-&gt;param_count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            zval_ptr_dtor(&amp;fci-&gt;params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        efree(fci-&gt;params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不需要使用的时候，也需要对回调函数本身进行减引用，以及回调函数内的用户态的参数进行减引用以及变量的回收。只有做完上面这些基本的管理才能<br>开发一个安全的扩展函数</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之用户空间申请的变量传递给扩展内函数使用，如果在返回给用户空间后依然会继续使用就要zval_copy或者引用计数+1,因为在返回给用户空间的时候本身用户空间gc会判断该变量是否有继续引用，否则就<code>refcount -= 1</code>，用户空间回收该变量，但是扩展函数内依然在访问该已经被销毁的变量。就会导致错误</p><p>只有将这些变量的引用与回收做好了才能开发出安全可靠的扩展函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行php扩展开发的时候会遇到一些问题，就是php用户态空间将变量传递到扩展层面&lt;code&gt;c层调用&lt;/code&gt;的时候，会出现一些问题，下面的例子是一个timer定时器的例子。&lt;br&gt;用户空间会传递一个回调函数给&lt;code&gt;timer扩展接口&lt;/code&gt;，那么实际回调函
      
    
    </summary>
    
    
      <category term="blog" scheme="https://superver.github.io/categories/blog/"/>
    
      <category term="php" scheme="https://superver.github.io/categories/blog/php/"/>
    
    
      <category term="linux" scheme="https://superver.github.io/tags/linux/"/>
    
      <category term="php" scheme="https://superver.github.io/tags/php/"/>
    
      <category term="c" scheme="https://superver.github.io/tags/c/"/>
    
      <category term="ext" scheme="https://superver.github.io/tags/ext/"/>
    
      <category term="refrerence" scheme="https://superver.github.io/tags/refrerence/"/>
    
      <category term="gc" scheme="https://superver.github.io/tags/gc/"/>
    
  </entry>
  
</feed>
